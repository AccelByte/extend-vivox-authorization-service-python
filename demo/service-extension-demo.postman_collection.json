{
	"info": {
		"_postman_id": "3e3305a3-bc6f-498f-adae-5a6f79a9f96d",
		"name": "Vivox Extend Service Extension Demo",
		"description": "This `collection` requires an `environment` with the following variables.\n\n- `AB_BASE_URL`\n- `AB_NAMESPACE`\n- `AB_CLIENT_ID`\n- `AB_CLIENT_SECRET`\n- `EXTEND_APP_SERVICE_URL`\n    \n\nYou will need following permissions for the IAM Client.  \nFor AGS Private Cloud customers:\n\n- `ADMIN:ROLE [CREATE, READ, UPDATE, DELETE]`\n    - `[CREATE, UPDATE, DELETE]` is needed to create, add, and clean up the role that contains the custom permission `ADMIN:NAMESPACE:{namespace}:VIVOX:TOKEN`\n- `ADMIN:NAMESPACE:{namespace}:ROLE:USER:\\* [UPDATE]`\n    \n    - `[UPDATE]` is needed to add role to the user\n- `ADMIN:NAMESPACE:{namespace}:NAMESPACE [READ]`\n- `ADMIN:NAMESPACE:{namespace}:VIVOX:TOKEN [READ]`\n    \n\nFor AGS Shared Cloud customers:\n\n- IAM > Roles (Read)\n- Basic > Namespace (Read)\n    \n\n> Note: Creating and assigning custom roles and permissions is still not available in AGS Shared Cloud and is coming soon; so for now, setting `PLUGIN_GRPC_SERVER_AUTH_ENABLED` to `false` is needed. \n  \n\nMake sure you have deployed Extend Service Extension app. Get `EXTEND_APP_SERVICE_URL` from extend app page in admin portal. For local deployment, use local url instead.\n\nPlease read [getting started with Extend Service Extension](https://docs.accelbyte.io/gaming-services/services/extend/service-extension/getting-started-service-extension/) and [Vivox authentication service sample](https://docs.accelbyte.io/gaming-services/services/extend/service-extension/vivox-authentication-service/) for more information.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17100405"
	},
	"item": [
		{
			"name": "10-client-login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Store client access token in collection variable\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    \r",
							"    if (responseJson.access_token !== undefined) {\r",
							"        pm.collectionVariables.set('CLIENT_ACCESS_TOKEN', responseJson.access_token)\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{AB_CLIENT_SECRET}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{AB_CLIENT_ID}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{AB_BASE_URL}}/iam/v3/oauth/token",
					"host": [
						"{{AB_BASE_URL}}"
					],
					"path": [
						"iam",
						"v3",
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "20-client-create-role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Store role identifier in collection variable\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    \r",
							"    if (responseJson.roleId !== undefined) {\r",
							"        pm.collectionVariables.set('TEST_ROLE_ID', responseJson.roleId)\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{CLIENT_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"adminRole\": false,\n  \"deletable\": true,\n  \"isWildcard\": false,\n  \"roleName\": \"Vivox Role\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{AB_BASE_URL}}/iam/v4/admin/roles",
					"host": [
						"{{AB_BASE_URL}}"
					],
					"path": [
						"iam",
						"v4",
						"admin",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "21-client-add-role-permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{CLIENT_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"permissions\": [\n    {\n      \"action\": 2,\n      \"resource\": \"ADMIN:NAMESPACE:{namespace}:VIVOX:TOKEN\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{AB_BASE_URL}}/iam/v4/admin/roles/{{TEST_ROLE_ID}}/permissions",
					"host": [
						"{{AB_BASE_URL}}"
					],
					"path": [
						"iam",
						"v4",
						"admin",
						"roles",
						"{{TEST_ROLE_ID}}",
						"permissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "22-client-create-test-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Store test user id, email, and password in collection variable\", function () {",
							"    var responseJson = pm.response.json();",
							"    ",
							"    if (responseJson.data[0].userId !== undefined) {",
							"        pm.collectionVariables.set('TEST_USER_ID', responseJson.data[0].userId)",
							"    }",
							"    if (responseJson.data[0].emailAddress !== undefined) {",
							"        pm.collectionVariables.set('TEST_USER_EMAIL', responseJson.data[0].emailAddress)",
							"    }",
							"    if (responseJson.data[0].password !== undefined) {",
							"        pm.collectionVariables.set('TEST_USER_PASSWORD', responseJson.data[0].password)",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{CLIENT_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"count\": 1,\n  \"userInfo\": {\n    \"country\": \"US\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{AB_BASE_URL}}/iam/v4/admin/namespaces/{{AB_NAMESPACE}}/test_users",
					"host": [
						"{{AB_BASE_URL}}"
					],
					"path": [
						"iam",
						"v4",
						"admin",
						"namespaces",
						"{{AB_NAMESPACE}}",
						"test_users"
					]
				}
			},
			"response": []
		},
		{
			"name": "23-client-assign-role-to-test-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{CLIENT_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"assignedNamespaces\": [\n    \"{{AB_NAMESPACE}}\"\n  ],\n  \"roleId\": \"{{TEST_ROLE_ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{AB_BASE_URL}}/iam/v4/admin/namespaces/{{AB_NAMESPACE}}/users/{{TEST_USER_ID}}/roles",
					"host": [
						"{{AB_BASE_URL}}"
					],
					"path": [
						"iam",
						"v4",
						"admin",
						"namespaces",
						"{{AB_NAMESPACE}}",
						"users",
						"{{TEST_USER_ID}}",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "24-test-user-login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Store user access token in collection variable\", function () {",
							"    var responseJson = pm.response.json();",
							"    ",
							"    if (responseJson.access_token !== undefined) {",
							"        pm.collectionVariables.set('USER_ACCESS_TOKEN', responseJson.access_token)",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{AB_CLIENT_SECRET}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{AB_CLIENT_ID}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "username",
							"value": "{{TEST_USER_EMAIL}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{TEST_USER_PASSWORD}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{AB_BASE_URL}}/iam/v3/oauth/token",
					"host": [
						"{{AB_BASE_URL}}"
					],
					"path": [
						"iam",
						"v3",
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "30-generate-login-token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function parseJwt(token, part) {",
							"    var base64Url = token.split(\".\")[part];",
							"    var words = CryptoJS.enc.Base64.parse(base64Url);",
							"    var jsonPayload = CryptoJS.enc.Utf8.stringify(words);",
							"    return JSON.parse(jsonPayload);",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test access token values\", function () {",
							"    var responseJson = pm.response.json();",
							"    var accessToken = responseJson.accessToken;",
							"",
							"    pm.expect(accessToken).is.not.undefined;",
							"",
							"    var jwtPayload = parseJwt(accessToken, 1);",
							"",
							"    pm.expect(jwtPayload.iss).is.a(\"string\");",
							"    pm.expect(jwtPayload.vxa).is.equals(\"login\");",
							"    pm.expect(jwtPayload.f).is.a(\"string\")",
							"        .and.contains(jwtPayload.iss)",
							"        .and.contains(\"jerky\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"login\",\r\n  \"username\": \"jerky\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{EXTEND_APP_SERVICE_URL}}/v1/token",
					"host": [
						"{{EXTEND_APP_SERVICE_URL}}"
					],
					"path": [
						"v1",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "40-generate-join-token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function parseJwt(token, part) {",
							"    var base64Url = token.split(\".\")[part];",
							"    var words = CryptoJS.enc.Base64.parse(base64Url);",
							"    var jsonPayload = CryptoJS.enc.Utf8.stringify(words);",
							"    return JSON.parse(jsonPayload);",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test access token values\", function () {",
							"    var responseJson = pm.response.json();",
							"    var accessToken = responseJson.accessToken;",
							"",
							"    pm.expect(accessToken).is.not.undefined;",
							"",
							"    var jwtPayload = parseJwt(accessToken, 1);",
							"",
							"    pm.expect(jwtPayload.iss).is.a(\"string\");",
							"    pm.expect(jwtPayload.vxa).is.equals(\"join\");",
							"    pm.expect(jwtPayload.f).is.a(\"string\")",
							"        .and.contains(jwtPayload.iss)",
							"        .and.contains(\"jerky\");",
							"    pm.expect(jwtPayload.t).is.a(\"string\")",
							"        .and.contains(jwtPayload.iss)",
							"        .and.contains(\"-g-\")",
							"        .and.contains(\"testchannel\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"channelId\": \"testchannel\",\r\n  \"channelType\": \"nonpositional\",\r\n  \"type\": \"join\",\r\n  \"username\": \"jerky\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{EXTEND_APP_SERVICE_URL}}/v1/token",
					"host": [
						"{{EXTEND_APP_SERVICE_URL}}"
					],
					"path": [
						"v1",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "41-generate-join-muted-token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function parseJwt(token, part) {",
							"    var base64Url = token.split(\".\")[part];",
							"    var words = CryptoJS.enc.Base64.parse(base64Url);",
							"    var jsonPayload = CryptoJS.enc.Utf8.stringify(words);",
							"    return JSON.parse(jsonPayload);",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test access token values\", function () {",
							"    var responseJson = pm.response.json();",
							"    var accessToken = responseJson.accessToken;",
							"",
							"    pm.expect(accessToken).is.not.undefined;",
							"",
							"    var jwtPayload = parseJwt(accessToken, 1);",
							"",
							"    pm.expect(jwtPayload.iss).is.a(\"string\");",
							"    pm.expect(jwtPayload.vxa).is.equals(\"join_muted\");",
							"    pm.expect(jwtPayload.f).is.a(\"string\")",
							"        .and.contains(jwtPayload.iss)",
							"        .and.contains(\"jerky\");",
							"    pm.expect(jwtPayload.t).is.a(\"string\")",
							"        .and.contains(jwtPayload.iss)",
							"        .and.contains(\"-g-\")",
							"        .and.contains(\"testchannel\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"channelId\": \"testchannel\",\r\n  \"channelType\": \"nonpositional\",\r\n  \"type\": \"join_muted\",\r\n  \"username\": \"jerky\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{EXTEND_APP_SERVICE_URL}}/v1/token",
					"host": [
						"{{EXTEND_APP_SERVICE_URL}}"
					],
					"path": [
						"v1",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "50-generate-kick-token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function parseJwt(token, part) {",
							"    var base64Url = token.split(\".\")[part];",
							"    var words = CryptoJS.enc.Base64.parse(base64Url);",
							"    var jsonPayload = CryptoJS.enc.Utf8.stringify(words);",
							"    return JSON.parse(jsonPayload);",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test access token values\", function () {",
							"    var responseJson = pm.response.json();",
							"    var accessToken = responseJson.accessToken;",
							"",
							"    pm.expect(accessToken).is.not.undefined;",
							"",
							"    var jwtPayload = parseJwt(accessToken, 1);",
							"",
							"    pm.expect(jwtPayload.iss).is.a(\"string\");",
							"    pm.expect(jwtPayload.vxa).is.equals(\"kick\");",
							"    pm.expect(jwtPayload.f).is.a(\"string\")",
							"        .and.contains(jwtPayload.iss)",
							"        .and.contains(\"beef\");",
							"    pm.expect(jwtPayload.t).is.a(\"string\")",
							"        .and.contains(jwtPayload.iss)",
							"        .and.contains(\"-g-\")",
							"        .and.contains(\"testchannel\");",
							"    pm.expect(jwtPayload.sub).is.a(\"string\")",
							"        .and.contains(jwtPayload.iss)",
							"        .and.contains(\"jerky\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"channelId\": \"testchannel\",\r\n  \"channelType\": \"nonpositional\",\r\n  \"targetUsername\": \"jerky\",\r\n  \"type\": \"kick\",\r\n  \"username\": \"beef\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{EXTEND_APP_SERVICE_URL}}/v1/token",
					"host": [
						"{{EXTEND_APP_SERVICE_URL}}"
					],
					"path": [
						"v1",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "91-client-delete-role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set('TEST_ROLE_ID', \"\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{CLIENT_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"adminRole\": false,\n  \"deletable\": true,\n  \"isWildcard\": false,\n  \"roleName\": \"Vivox Role\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{AB_BASE_URL}}/iam/v4/admin/roles/{{TEST_ROLE_ID}}",
					"host": [
						"{{AB_BASE_URL}}"
					],
					"path": [
						"iam",
						"v4",
						"admin",
						"roles",
						"{{TEST_ROLE_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "90-client-delete-test-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set('TEST_USER_ID', \"\");",
							"pm.collectionVariables.set('TEST_USER_EMAIL', \"\");",
							"pm.collectionVariables.set('TEST_USER_PASSWORD', \"\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{CLIENT_ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{AB_BASE_URL}}/iam/v3/admin/namespaces/{{AB_NAMESPACE}}/users/{{TEST_USER_ID}}/information",
					"host": [
						"{{AB_BASE_URL}}"
					],
					"path": [
						"iam",
						"v3",
						"admin",
						"namespaces",
						"{{AB_NAMESPACE}}",
						"users",
						"{{TEST_USER_ID}}",
						"information"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CLIENT_ACCESS_TOKEN",
			"value": ""
		},
		{
			"key": "USER_ACCESS_TOKEN",
			"value": ""
		},
		{
			"key": "EXTEND_APP_SERVICE_URL",
			"value": "",
			"type": "string"
		},
		{
			"key": "TEST_USER_ID",
			"value": ""
		},
		{
			"key": "TEST_USER_EMAIL",
			"value": ""
		},
		{
			"key": "TEST_USER_PASSWORD",
			"value": ""
		},
		{
			"key": "TEST_ROLE_ID",
			"value": ""
		}
	]
}